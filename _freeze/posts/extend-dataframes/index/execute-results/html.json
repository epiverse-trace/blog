{
  "hash": "664c966c2583572041a2047ac2092fd8",
  "result": {
    "markdown": "---\ntitle: \"Extending Data Frames\"\nsubtitle: \"Creating custom classes and {dplyr} compatibility\"\nauthor:\n  - name: \"Joshua W. Lambert\"\n    orcid: \"0000-0001-5218-3046\"\ndate: \"2023-04-12\"\ncategories: [data frame, R, R package, interoperability, S3 class, dplyr]\nformat:\n  html:\n    toc: true\n---\n\n\n## Extending Data Frames in R\n\nR is a commonly used language for data science and statistical computing. Foundational to this is having data structures that allow manipulation of data with minimal effort and cognitive load. One of the most commonly required data structures is tabular data. This can be represented in R in a few ways, for example a matrix or a data frame. The data frame (class `data.frame`) is a flexible tabular data structure, as it can hold different data types (e.g. numbers, character strings, etc.) across different columns. This is in contrast to matrices -- which are arrays with dimensions -- and thus can only hold a single data type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# data frame can hold heterogeneous data types across different columns\ndata.frame(a = c(1, 2, 3), b = c(4, 5, 6), c = c(\"a\", \"b\", \"c\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  a b c\n1 1 4 a\n2 2 5 b\n3 3 6 c\n```\n\n\n:::\n\n```{.r .cell-code}\n# each column must be of the same type\ndf <- data.frame(a = c(1, 2, 3), b = c(\"4\", 5, 6))\n# be careful of the silent type conversion\ndf$a\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\ndf$b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"4\" \"5\" \"6\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmat <- matrix(1:9, nrow = 3, ncol = 3)\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n\n\n:::\n\n```{.r .cell-code}\nmat[1, 1] <- \"1\"\n# be careful of the silent type conversion\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,] \"1\"  \"4\"  \"7\" \n[2,] \"2\"  \"5\"  \"8\" \n[3,] \"3\"  \"6\"  \"9\" \n```\n\n\n:::\n:::\n\n\nData frames can even be nested, cells can be data frames or lists.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(a = \"w\", b = \"x\")\ndf[1, 1][[1]] <- list(c = c(\"y\", \"z\"))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     a b\n1 y, z x\n```\n\n\n:::\n\n```{.r .cell-code}\ndf <- data.frame(a = \"w\", b = \"x\")\ndf[1, 1][[1]] <- list(data.frame(c = \"y\", d = \"z\"))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     a b\n1 y, z x\n```\n\n\n:::\n:::\n\n\nIt is therefore clear why data frames are so prevalent. However, they are not without limitations. They have a relatively basic printing method which can fload the R console when the number of columns or rows is large. They have useful methods (e.g., `summary()` and `str()`), but these might not be appropriate for certain types of tabular data. In these cases it is useful to utilise R's inheritance mechanisms (specifically S3 inheritance) to write extensions for R's `data.frame` class. In this case the data frame is the superclass and the new subclass extends it and inherits its methods (see [the *Advanced R* book](https://adv-r.hadley.nz/s3.html#s3-inheritance) for more details on S3 inheritance).\n\nOne of the most common extension of the data frame is the `tibble` from the {tibble} R package. Outlined in [{tibble}'s vignette](https://tibble.tidyverse.org/articles/tibble.html), `tibble`s offer improvements in printing, subsetting and recycling rules. Another commonly used data frame extension is the `data.table` class from the [{data.table} R package](https://github.com/Rdatatable/data.table). In addition to the improved printing, this class is designed to improve the performance (i.e. speed and efficiency of operations and storage) of working with tabular data in R and provide a terse syntax for manipulation.\n\nIn the process of developing R software (most likely an R package), a new tabular data class that builds atop data frames can become beneficial. This blog post has two main sections:\n\n1. a brief overview of  the steps required to setup a class that extends data frames\n2. guide to the technical aspects of class invariants (required data members of a class) and design and implementation decisions, and tidyverse compatibility\n\n### Writing a custom data class\n\nIt is useful to write a class constructor function that can be called to create an object of your new class. The functions defined below are a redacted version (for readability) of functions available in the [{ExtendDataFrames} R package](https://github.com/joshwlambert/ExtendDataFrames), which contains example functions and files discussed in this post. When assigning the class name ensure that it is a vector containing `\"data.frame\"` as the last element\nto correctly inherit properties and methods from the `data.frame` class.\n\n```r\nbirthdays <- function(x) {\n  # the vector of classes is required for it to inherit from `data.frame`\n  structure(x, class = c(\"birthdays\", \"data.frame\"))\n}\n```\n\nThat's all that's needed to create a subclass of a data frame. However, although we've created the class we haven't given it any functionality and thus it will be identical to a data frame due to inheritance.\n\nWe can now write as many methods as we want. Here we will show two methods, one of which does not require writing a generic (`print.birthdays`) and the second that does (`birthdays_per_month`). The `print()` generic function is provided by R, which is why we do not need to add one ourselves. See [Adv R](https://adv-r.hadley.nz/s3.html#s3-methods) and this [Epiverse blog post](https://epiverse-trace.github.io/posts/s3-generic/) to find out more about S3 generics.\n\n```r\nprint.birthdays <- function(x, ...) {\n  cat(\n    sprintf(\n      \"A `birthdays` object with %s rows and %s cols\",\n      dim(x)[1], dim(x)[2]\n    )\n  )\n  invisible(x)\n}\n\nbirthdays_per_month <- function(x, ...) {\n  UseMethod(\"birthdays_per_month\")\n}\n\nbirthdays_per_month.birthdays <- function(x, ...) {\n  out <- table(lubridate::month(x$birthday))\n  months <- c(\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n  )\n  names(out) <- months[as.numeric(names(out))]\n  return(out)\n}\n```\n\n::: {.callout-tip}\nUseful resources for the \"Writing custom data class\" section:\n[extending `tibbles` and their functionality](https://tibble.tidyverse.org/articles/extending.html)\n:::\n\n### Design decision around class invariants\n\nWe will now move on to the second section of the post, in which we discuss the design choices when creating and using S3 classes in R. ***Class invariants*** are members of your class that define it. In other words, without these elements your class does not fulfil its basic definition. It is therefore sensible to make sure that your class contains these elements at all times (or at least after operations have been applied to your class). In cases when the class object contains all the invariants normal service can be continued. However, in the case that an invariant is missing or modified to a non-conformist type (e.g. a date converted to a numeric) a decision has to be made. Either the code can error, hopefully giving the user an informative message as to why their modification broke the object; alternatively, the subclass can be revoked and the superclass can be returned. In almost all cases the superclass (i.e. the base class being inherited from) is more general and won't have the same class invariant restrictions.\n\nFor our example class, `<birthdays>`, the invariants are a column called `name` which must contain characters, and a column called `birthday` which must contain dates. The order of the rows and columns is not considered an invariant property, and having extra columns with other names and data types is also allowed. The number of rows is also not an invariant as we can have as many birthdays as we like in the data object.\n\nHere we present both cases as well as considerations and technical details of both options. We'll demonstrate both of these cases with the subset function in R (subsetting uses a single square bracket for tabular data, `[`). First the fail-on-subsetting. Before we write the subsetting function it is useful to have a function that checks that an object of our class is valid, a so-called validator function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalidate_birthdays <- function(x) {\n  stopifnot(\n    \"input must contain 'name' and 'birthday' columns\" =\n      all(c(\"name\", \"birthday\") %in% colnames(x)),\n    \"names must be a character\" =\n      is.character(x$name),\n    \"birthday must be a date\" =\n      lubridate::is.Date(x$birthday)\n  )\n  invisible(x)\n}\n```\n:::\n\n\nThis will return an error if the class is not valid (defined in terms of the class' invariants).\n\nNow we can show how to error if one of the invariants are removed during subsetting. See `?NextMethod()` for information on method dispatch.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n`[.birthdays` <- function(x) {\n  validate_birthdays(NextMethod())\n}\n\nbirthdays[, -1]\n#  Error in validate_birthdays(NextMethod()) :\n#  input must contain 'name' and 'birthday' columns\n```\n:::\n\n\nThe second design option is the reconstruct-on-subsetting. This checks whether the class is valid, and if not downgrade the class to the superclass, in our case a data frame. This is done by not only validating the object during subsetting but to check whether it is a valid class object, and then either ensuring all of the attributes of the subclass -- in our case `<birthdays>` -- are maintained, or attributes are stripped and only the attributes of the base superclass -- in our case `data.frame` -- are kept.\n\n::: {.callout-note}\nImportant note: this section of the post relies heavily on <https://github.com/DavisVaughan/2020-06-01_dplyr-vctrs-compat>.\n:::\n  \nThe four functions that are required to be added to ensure our class is correctly handled when invaliding it are:\n  \n- `birthdays_reconstruct()`\n- `birthdays_can_reconstruct()`\n- `df_reconstruct()`\n- `dplyr_reconstruct.birthdays()`\n\nWe'll tackle the first three first, and then move onto to the last one as this requires some extra steps.\n\n`birthdays_reconstruct()` is a function that contains an if-else statement to determine whether the returned object is a `<birthdays>` or `data.frame` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirthdays_reconstruct <- function(x, to) {\n  if (birthdays_can_reconstruct(x)) {\n    df_reconstruct(x, to)\n  } else {\n     x <- as.data.frame(x)\n    message(\"Removing crucial column in `<birthdays>` returning `<data.frame>`\")\n    x\n  }\n}\n```\n:::\n\n\nThe if-else evaluation is controlled by `birthdays_can_reconstruct()`. This function determines whether after subsetting the object is a valid `<birthdays>` class. It checks whether the validator fails, in which case it returns `FALSE`, otherwise the function will return `TRUE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirthdays_can_reconstruct <- function(x) {\n  # check whether input is valid\n  valid <- tryCatch(\n    { validate_birthdays(x) },\n    error = function(cnd) FALSE\n  )\n\n  # return boolean\n  !isFALSE(valid)\n}\n```\n:::\n\n\nThe next function required is `df_reconstruct()`. This is called when the object is judged to be a valid `<birthdays>` object and simply copies the attributes over from the `<birthdays>` class to the object being subset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_reconstruct <- function(x, to) {\n  attrs <- attributes(to)\n  attrs$names <- names(x)\n  attrs$row.names <- .row_names_info(x, type = 0L)\n  attributes(x) <- attrs\n  x\n}\n```\n:::\n\n\nThe three functions defined for reconstruction can be added to a package with the subsetting function in order to subset `<birthdays>` objects and returning either `<birthdays>` objects if still valid, or data frames when invalidated. This design has the benefit that when conducting data exploration a user is not faced with an error, but can continue with a data frame, while being informed by the message printed to console in `birthdays_reconstruct()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n`[.birthdays` <- function(x, ...) {\n  out <- NextMethod()\n  birthdays_reconstruct(out, x)\n}\n```\n:::\n\n\n### Compatibility with {dplyr}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n\nIn order to be able to operate on our `<birthdays>` class using functions from the\npackage {dplyr}, as would be common for data frames, we need to make our function compatible. This is where the function `dplyr_reconstruct.birthdays()` comes in. `dplyr_reconstruct()` is a generic function exported by {dplyr}. It is called in {dplyr} verbs to make sure that the objects are restored to the input class when not invalidated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr_reconstruct.birthdays <- function(data, template) { # nolint\n  birthdays_reconstruct(data, template)\n}\n```\n:::\n\n\nInformation about the generic can be found through the {dplyr} help documentation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?dplyr::dplyr_extending\n?dplyr::dplyr_reconstruct\n```\n:::\n\n\nAs explained in the help documentation, {dplyr} also uses two base R functions to perform data manipulation.\n`names<-` (i.e the names setter function) and `[` the one-dimensional subsetting function. We therefore define these methods for our custom class in order for `dplyr_reconstruct()` to work as intended.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n`[.birthdays` <- function(x, ...) {\n  out <- NextMethod()\n  birthdays_reconstruct(out, x)\n}\n\n`names<-.birthdays` <- function(x, value) {\n  out <- NextMethod()\n  birthdays_reconstruct(out, x)\n}\n```\n:::\n\n\nThis wraps up the need for adding function to perform data manipulation using the reconstruction design outlined above.\n\nHowever, there is some final housekeeping to do. In cases when {dplyr} is not a package dependency (either imported or suggested), then the S3 generic `dplyr_reconstruct()` is required to be loaded. In R versions before 3.6.0 -- this also works for R versions later than 3.6.0 -- the generic function needs to be registered. This is done by writing an `.onLoad()` function, typically in a file called `zzz.R`. This is included in the {ExtendDataFrames} package for illustrative purposes.\n\n<!-- \n  This is not yet documented in quarto but it looks like code blocks with the\n  'filename' instruction needs .r rather than r as language.\n-->\n```{.r filename=\"zzz.R\"}\n.onLoad <- function(libname, pkgname) {\n  s3_register(\"dplyr::dplyr_reconstruct\", \"birthdays\")\n  invisible()\n}\n```\n\nThe `s3_register()` function used in `.onLoad()` also needs to be added to the package and this function is kindly supplied by both {vctrs} and {rlang} unlicensed and thus can be copied into another package. See the [R packages book](https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-attach-vs-load) for information about `.onLoad()` and attaching and loading in general.\n\nSince R version 3.6.0 this [S3 generic registration](https://blog.r-project.org/2019/08/19/s3-method-lookup/index.html) happens automatically with `S3Method()` in the package namespace using the {roxygen2} documentation `#' @exportS3Method dplyr::dplyr_reconstruct`.\n\nThere is one last option which prevents the hard dependency on a relatively recent R version. Since {roxygen2} version 6.1.0, there is the `@rawNamespace` tag which allows insertion of text into the NAMESPACE file. Using this tag the following code will check the local R version and register the S3 method if equal to or above 3.6.0.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' @rawNamespace if (getRversion() >= \"3.6.0\") {\n#'   S3method(pkg::fun, class)\n#' }\n```\n:::\n\n\nEach of the three options for registering S3 methods has different benefits and downsides, so the choice depends on the specific use-case. Over time it may be best to use the most up-to-date methods as packages are usually only maintained for a handful of recent R releases[^1].\n\nThe topics discussed in this post have been implemented in the [{epiparameter} R package](https://github.com/epiverse-trace/epiparameter) within [Epiverse-TRACE](https://github.com/epiverse-trace).\n\nCompatibility with {vctrs} is also possible using the same mechanism (functions) described in this post, and if interested see <https://github.com/DavisVaughan/2020-06-01_dplyr-vctrs-compat> for details.\n\nFor other use-cases and discussions of the designs and implementations discussed in this post see:\n  \n- [{dials} R package](https://github.com/tidymodels/dials)\n- [{rsample} R package](https://github.com/tidymodels/rsample)\n- [{googledrive} R package](https://github.com/tidyverse/googledrive)\n- [Pull request on {tibble} R package](https://github.com/tidyverse/tibble/issues/890)\n\nThis blog post is a compendium of information from sources that are linked and cited throughout. Please refer to those sites for more information and as the primary source for citation in further work.\n\n[^1]: This is the working practise of tidyverse packages: [https://www.tidyverse.org/blog/2019/04/r-version-support/](https://www.tidyverse.org/blog/2019/04/r-version-support/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}