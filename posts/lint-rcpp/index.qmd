---
title: "Linting the C++ Code of an Rcpp Package"
author: "Pratik R Gupte"
date: "2022-11-28"
categories: [code quality, R package, Rcpp]
format:
  html:
    toc: true
---

The R package development ecosystem includes packages such as [{lintr}](https://lintr.r-lib.org/) and [{styler}](https://styler.r-lib.org) that can help to check code style, and to format R code.

However, these packages cannot lint or style the C++ code of [{Rcpp}]() packages. This could leave the C++ code of an Rcpp package less clean than the R code, increasing the technical debt already associated with two-language packages. 

In the Epiverse, we encounter this issue with [{finalsize}](), and we anticipate the same issue with further epidemic modelling packages that we seek to develop or adapt, such as [{fluEvidenceSynthesis}]().

C++ linters such as [_clang-tidy_]() also stumble when dealing with Rcpp code, as the _clang_ toolchain attempts to compile the code, which does not work for Rcpp packages.

Fortunately, other C++ linters and code checking tools are available and can be used safely with Rcpp packages.

## Choice of C++ linters

We have chosen to use _cpplint_ and _cppcheck_ for {finalsize}.

### Cpplint

[_cpplint_](https://github.com/cpplint/cpplint) is a tool that checks whether C/C++ files follow [Google's C++ style guide](http://google.github.io/styleguide/cppguide.html). _cpplint_ is (1) Easy to install across platforms, (2) Easily instructed to ignore the `RcppExports.cpp` file, so as to preserve its formatting, and (3) Does not error when it cannot find `Rcpp.h`

_cpplint_ can be run locally from the terminal, and instructed to not lint `RcppExports.cpp`, but all other `.cpp` files in `src/`.

```sh
cpplint --exclude="src/RcppExports.cpp" src/*.cpp
```

### Cppcheck

[_cppcheck_](https://cppcheck.sourceforge.io/) is a static code analysis tool, that aims to "have very few false positives". This is especially useful for the non-standard organisation of Rcpp projects compared to C++ projects.

_cppcheck_ can also be run locally and instructed to ignore the autogenerated `RcppExports.cpp` file, while throwing up issues with style.

```sh
cppcheck -i src/RcppExports.cpp --enable=style --error-exitcode=1 src
```
